<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecture on cekrem.github.io</title><link>https://cekrem.github.io/tags/architecture/</link><description>Recent content in Architecture on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 18 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Books I Think Software Engineers Should Read</title><link>https://cekrem.github.io/posts/books-i-think-software-engineers-should-read/</link><pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/books-i-think-software-engineers-should-read/</guid><description>&lt;p>What follows is a non-ordered &amp;amp; non-exhaustive list of great programming books that I&amp;rsquo;d recommend every ambitious software engineer. The language specific ones are obviously not for everyone.&lt;/p>
&lt;p>Disclaimer: I have not read all of these from cover to cover. I&amp;rsquo;ve read most, but some are on my list of books to read next based on suggestions and/or reviews from people I trust.&lt;/p>
&lt;h2 id="general">
 General
 &lt;a class="heading-link" href="#general">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://amzn.to/4gAOaHa" class="external-link" target="_blank" rel="noopener">Deep Work: Rules for Focused Success in a Distracted World&lt;/a> â€“ Not a programming / software engineering book at all per say, but a &lt;em>highly&lt;/em> recommended read regardless. If you read one book on this list, go for this one, for real.&lt;/li>
&lt;li>&lt;a href="https://amzn.to/3VIleoE" class="external-link" target="_blank" rel="noopener">Clean Code&lt;/a>, &lt;a href="https://amzn.to/3ZZu3Ny" class="external-link" target="_blank" rel="noopener">Clean Code&lt;em>r&lt;/em>&lt;/a> and &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener">Clean Architecture&lt;/a> â€” These Uncle Bob classics are great. I&amp;rsquo;m currently enjoying the architecture one &lt;em>on audible&lt;/em>, that&amp;rsquo;s a first for me with a software engineering book. Simply great, and truly a pleasant read/listen.&lt;/li>
&lt;li>&lt;a href="https://amzn.to/4gjf4Ud" class="external-link" target="_blank" rel="noopener">The Pragmatic Programmer: Your Journey To Mastery&lt;/a> â€” A classic, and a good one at that!&lt;/li>
&lt;li>&lt;a href="https://amzn.to/41GYOrQ" class="external-link" target="_blank" rel="noopener">Staff Engineer: Leadership beyond the management track&lt;/a> â€” This one I find a tiny bit boring, to be perfectly honest, but still very helpful. Lot&amp;rsquo;s of insight about &amp;ldquo;all the other stuff&amp;rdquo; (not coding).&lt;/li>
&lt;li>&lt;a href="https://amzn.to/4gjc9ex" class="external-link" target="_blank" rel="noopener">The Effective Engineer: How to Leverage Your Efforts In Software Engineering to Make a Disproportionate and Meaningful Impact&lt;/a> â€” I haven&amp;rsquo;t read this one yet, but it&amp;rsquo;s been highly recommended to me by trustworthy people. And how about that killer subtitle, ey?&lt;/li>
&lt;/ul>
&lt;h2 id="golang">
 Golang
 &lt;a class="heading-link" href="#golang">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://amzn.to/4fruZyJ" class="external-link" target="_blank" rel="noopener">The Go Programming Language&lt;/a> â€”
Kind of obvious, this one. But a great classic! I remember enjoying the chapter about UTF-8 a lot, as well as the generally thorough explanations of how and &lt;em>why&lt;/em> Golang behaves.&lt;/li>
&lt;li>&lt;a href="https://amzn.to/3Bpf4TL" class="external-link" target="_blank" rel="noopener">Concurrency in Go: Tools and Techniques for Developers&lt;/a> â€” This is a truly great programming book! Even though Golang is made for concurrency, it&amp;rsquo;s still very possible to mess up. This book shows you how it&amp;rsquo;s done. What&amp;rsquo;s a bit cool (ðŸ¤“) is that it predates the &lt;code>context.Context&lt;/code> interface, and as such suggests using a manual &amp;ldquo;done channel&amp;rdquo; to enable canceling of coroutines. It shows the author&amp;rsquo;s insight that an exact pattern like that was introduced with the &lt;code>Context.Done()&lt;/code> method introduced later in the language. For more on that, check out &lt;a href="https://github.com/cekrem/goutils/commit/0a511038efd9186cf204d503f7ff37c83b5c5838" class="external-link" target="_blank" rel="noopener">this git diff&lt;/a>, on a small golang utility library I started on way back.&lt;/li>
&lt;li>Feel free to skip this one, though: &lt;a href="https://amzn.to/3P1uq3R" class="external-link" target="_blank" rel="noopener">Learning Functional Programming in Go&lt;/a> â€” This book should, IMHO, rather have been a tweet. Something like this: &amp;ldquo;Go is not really suited for functional programming, I&amp;rsquo;d advice you not to do it at scale.&amp;rdquo; Fun fact: this book is actually what got me into &lt;a href="#kotlin" >Kotlin&lt;/a>. All that talk about &lt;a href="https://stackoverflow.com/questions/310974/what-is-tail-call-optimization" class="external-link" target="_blank" rel="noopener">tail call optimization&lt;/a> (and how Golang is &lt;em>not&lt;/em> doing that&amp;hellip;) got me searching for more functional fun outside of Elm, Haskell and Lisp.&lt;/li>
&lt;/ul>
&lt;h2 id="python">
 Python
 &lt;a class="heading-link" href="#python">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://amzn.to/3Dyiyni" class="external-link" target="_blank" rel="noopener">Fluent Python: Clear, Concise, and Effective Programming&lt;/a> â€” I read this one on my Kindle, actually, before I learned that Kindle&amp;rsquo;s not where programming books really shine. That aside, I have nothing but fond memories from the first edition, and I&amp;rsquo;ve heard the updates on the second edition are really worthwhile. If you want to read &lt;em>one&lt;/em> Python book, this is it.&lt;/li>
&lt;li>&lt;a href="https://amzn.to/4gx5tt2" class="external-link" target="_blank" rel="noopener">Automate the Boring Stuff with Python, 2nd Edition: Practical Programming for Total Beginners&lt;/a> â€” This one is also cool! While mainly targeting &amp;ldquo;total beginners&amp;rdquo;, it&amp;rsquo;s also suitable for seasoned programmers who don&amp;rsquo;t usually work in Python, but want to leverage its super fast scripting capabilities to automate stuff.&lt;/li>
&lt;/ul>
&lt;h2 id="kotlin">
 Kotlin
 &lt;a class="heading-link" href="#kotlin">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://amzn.to/4gjT1wU" class="external-link" target="_blank" rel="noopener">Functional Programming in Kotlin&lt;/a> â€” Functional Programming &lt;em>and&lt;/em> Kotlin in the same book title?! No-brainer. This one is great!&lt;/li>
&lt;li>&lt;a href="https://amzn.to/402VYev" class="external-link" target="_blank" rel="noopener">Kotlin in Action&lt;/a> â€” One of two &amp;ldquo;general Kotlin books&amp;rdquo; I&amp;rsquo;d recommend.&lt;/li>
&lt;li>&lt;a href="https://amzn.to/3ZYEdxN" class="external-link" target="_blank" rel="noopener">Mastering Kotlin&lt;/a> â€” The other one :)&lt;/li>
&lt;/ul>
&lt;h2 id="lisp">
 Lisp
 &lt;a class="heading-link" href="#lisp">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://amzn.to/4izuO7c" class="external-link" target="_blank" rel="noopener">Land of Lisp: Learn to Program in Lisp, One Game at a Time!&lt;/a> â€” A bit whimsical, but then again Lisp is &lt;em>not&lt;/em>, so in sum a semi-serious book. I liked it Â¯\&lt;em>(ãƒ„)&lt;/em>/Â¯&lt;/li>
&lt;li>&lt;a href="https://amzn.to/4gf8sq2" class="external-link" target="_blank" rel="noopener">On Lisp: Advanced Techniques for Common Lisp&lt;/a> â€” &lt;em>The&lt;/em> Lisp book, by mr. Paul Graham himself. Hats off, hands down.&lt;/li>
&lt;li>&lt;a href="https://amzn.to/3ZVWUSW" class="external-link" target="_blank" rel="noopener">Practical Common Lisp&lt;/a> â€” The other Lisp book, I guess? Great.&lt;/li>
&lt;/ul>
&lt;h2 id="react">
 React
 &lt;a class="heading-link" href="#react">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://amzn.to/4iFXVWq" class="external-link" target="_blank" rel="noopener">Advanced React: Deep dives, investigations, performance patterns and techniques&lt;/a> â€” I&amp;rsquo;ve actually read (or at least skimmed) quite a few books on React â€” I even started writing one, way back â€” but this is the only one I think is worth recommending. If you&amp;rsquo;re a complete beginner there are probably other/better options, but given that you&amp;rsquo;re at least semi-familiar with thinking in React, this is The One.&lt;/li>
&lt;/ul>
&lt;h2 id="rust">
 Rust
 &lt;a class="heading-link" href="#rust">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://amzn.to/4gFp7D3" class="external-link" target="_blank" rel="noopener">The Rust Programming Language&lt;/a> â€” &amp;ldquo;The Book&amp;rdquo;, as official as it gets, and quite good at that.&lt;/li>
&lt;li>&lt;a href="https://amzn.to/400rtXM" class="external-link" target="_blank" rel="noopener">Programming Rust&lt;/a> â€” Less official, but a fine resource regardless. The two complement each other (and of course overlap a bit as well).&lt;/li>
&lt;/ul>
&lt;p>Warning: I might add more later.&lt;/p></description></item></channel></rss>