<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on cekrem.github.io</title><link>https://cekrem.github.io/tags/blog/</link><description>Recent content in Blog on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 11 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Replacing Hugo with a Custom Kotlin Blog Engine</title><link>https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture/</guid><description>&lt;h2 id="the-problem-with-static-site-generators">
 The Problem with Static Site Generators
 &lt;a class="heading-link" href="#the-problem-with-static-site-generators">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Don&amp;rsquo;t get me wrong - &lt;a href="https://gohugo.io/" class="external-link" target="_blank" rel="noopener">Hugo&lt;/a> is great. It&amp;rsquo;s blazing fast, feature-rich, and battle-tested. But as a developer who&amp;rsquo;s been diving deep into Clean Architecture lately (as you might have noticed from my &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" >recent&lt;/a> &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" >posts&lt;/a>), I&amp;rsquo;ve been itching to apply these principles to a real project. And what better way to learn than by potentially over-engineering my own blog engine?&lt;/p></description></item></channel></rss>