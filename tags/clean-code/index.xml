<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clean-Code on cekrem.github.io</title><link>https://cekrem.github.io/tags/clean-code/</link><description>Recent content in Clean-Code on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 07 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/clean-code/index.xml" rel="self" type="application/rss+xml"/><item><title>The Psychology of Clean Code: Why We Write Messy React Components</title><link>https://cekrem.github.io/posts/psychology-of-clean-code/</link><pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/psychology-of-clean-code/</guid><description>&lt;p>We all know we should write clean code. We&amp;rsquo;ve read the books, attended the talks, and nodded along to the principles. Yet, somehow, we still find ourselves writing messy React components. Why is that? The answer lies not in our technical skills, but in our psychology.&lt;/p>
&lt;h2 id="the-cognitive-load-trap">
 The Cognitive Load Trap
 &lt;a class="heading-link" href="#the-cognitive-load-trap">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Consider this common scenario:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">const&lt;/span> UserDashboard = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [users, setUsers] = useState([]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [loading, setLoading] = useState(&lt;span style="font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [error, setError] = useState(&lt;span style="font-weight:bold">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [filter, setFilter] = useState(&lt;span style="font-style:italic">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [sortBy, setSortBy] = useState(&lt;span style="font-style:italic">&amp;#34;name&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [page, setPage] = useState(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [totalPages, setTotalPages] = useState(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fetchUsers();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, [filter, sortBy, page]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> fetchUsers = &lt;span style="font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setLoading(&lt;span style="font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> response = &lt;span style="font-weight:bold">await&lt;/span> fetch(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">`/api/users?filter=&lt;/span>&lt;span style="font-weight:bold;font-style:italic">${&lt;/span>filter&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic">&amp;amp;sort=&lt;/span>&lt;span style="font-weight:bold;font-style:italic">${&lt;/span>sortBy&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic">&amp;amp;page=&lt;/span>&lt;span style="font-weight:bold;font-style:italic">${&lt;/span>page&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> data = &lt;span style="font-weight:bold">await&lt;/span> response.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setUsers(data.users);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setTotalPages(data.totalPages);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="font-weight:bold">catch&lt;/span> (err) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setError(err.message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="font-weight:bold">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setLoading(&lt;span style="font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> handleFilterChange = (e) =&amp;gt; setFilter(e.target.value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> handleSortChange = (e) =&amp;gt; setSortBy(e.target.value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> handlePageChange = (newPage) =&amp;gt; setPage(newPage);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> (loading) &lt;span style="font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="font-weight:bold">LoadingSpinner&lt;/span> /&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> (error) &lt;span style="font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="font-weight:bold">ErrorMessage&lt;/span> error={error} /&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="font-weight:bold">FilterBar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter={filter}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onFilterChange={handleFilterChange}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sortBy={sortBy}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onSortChange={handleSortChange}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="font-weight:bold">UserList&lt;/span> users={users} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="font-weight:bold">Pagination&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentPage={page}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> totalPages={totalPages}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onPageChange={handlePageChange}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This component isn&amp;rsquo;t terrible, but it&amp;rsquo;s not great either. It&amp;rsquo;s doing too much, handling too many concerns, and will be difficult to maintain. Yet, it&amp;rsquo;s exactly the kind of component we write when we&amp;rsquo;re under pressure or trying to move fast.&lt;/p></description></item></channel></rss>