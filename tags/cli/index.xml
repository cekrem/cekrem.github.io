<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cli on cekrem.github.io</title><link>https://cekrem.github.io/tags/cli/</link><description>Recent content in Cli on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 12 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/cli/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploring UIs in the terminal part 2: More ink!</title><link>https://cekrem.github.io/posts/do-more-stuff-cli-tool-part-2/</link><pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/do-more-stuff-cli-tool-part-2/</guid><description>&lt;h2 id="abandon-ship-all-yall">Abandon ship, all y&amp;rsquo;all&lt;/h2>
&lt;p>In &lt;a href="https://cekrem.github.io/posts/do-more-stuff-cli-tool-part-1">part 1&lt;/a>, I made a small POC cli tool for doing multiple things in parallel. Like curling multiple endpoints and collecting the responses in a neat and tidy list instead of opening several terminal tabs/panes. The goal was partly to explore how rendering actually works in a more confined environment than the DOM (web), or more complicated yet: native mobile apps. The other goal, as usual, was to have fun while doing it. My adventures in part 2 have, however, been slightly shipwrecked.&lt;/p></description></item><item><title>Exploring UIs in the terminal part 1: React/Ink</title><link>https://cekrem.github.io/posts/do-more-stuff-cli-tool-part-1/</link><pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/do-more-stuff-cli-tool-part-1/</guid><description>&lt;h2 id="where-do-uis-belong">Where do UIs belong?&lt;/h2>
&lt;p>Most of us consider ReactJS a tool for rendering UI components on the web (or the DOM, specifically), and if by &amp;ldquo;React&amp;rdquo; we mean &amp;ldquo;ReactDOM&amp;rdquo; then we&amp;rsquo;re right. But as we&amp;rsquo;ve seen with React Native, React is not confined to the DOM at all, and can render to any number of environments. After all, like it says on the box, React is a &amp;ldquo;JavaScript library for building user interfaces&amp;rdquo;. We&amp;rsquo;ve seen the same with &lt;a href="https://www.jetbrains.com/lp/compose-multiplatform/">Compose Multiplatform&lt;/a>: what used to be a framework for creating Android UI can actually be used for so much more.&lt;/p></description></item><item><title>ripnote – the fastest and fuzziest way for a developer to take notes</title><link>https://cekrem.github.io/posts/ripnote/</link><pubDate>Mon, 15 Aug 2022 13:35:45 +0200</pubDate><guid>https://cekrem.github.io/posts/ripnote/</guid><description>&lt;h2 id="the-best-tool-for-note-taking">The best tool for note-taking?&lt;/h2>
&lt;p>The one you have close at hand. ReMarkable this, vintage inherited bio-dynamic paper that – it&amp;rsquo;ll do you no good what-so-ever if it&amp;rsquo;s not readily available when you need it. I&amp;rsquo;ve spent way too much time trying to find the &amp;ldquo;ideal&amp;rdquo; solution for keeping track of notes and ideas through my workday. But all I &lt;em>really&lt;/em> need is this:&lt;/p>
&lt;ul>
&lt;li>To jot down new notes and ideas &lt;em>fast!&lt;/em>.&lt;/li>
&lt;li>To search through previous notes equally fast.&lt;/li>
&lt;/ul>
&lt;h2 id="what-could-possibly-be-better">What could possibly be better&amp;hellip;&lt;/h2>
&lt;p>&amp;hellip;Than to create notes from the comfort of your beloved terminal that&amp;rsquo;s already open anyway, and to do super-fast full text fuzzy searches in all you&amp;rsquo;ve ever written? Did I mention it&amp;rsquo;s fast?&lt;/p></description></item><item><title>create-elm-live-app – the smallest npm package ever?</title><link>https://cekrem.github.io/posts/create-elm-live-app/</link><pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/create-elm-live-app/</guid><description>&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>I&amp;rsquo;ve been tinkering a bit with Elm lately. The super-enforced functional and minimal paradigm is very refreshing, and serves as a sort of detox after spending one too many hour stuck in Android&amp;rsquo;s not-so-lovely XML + mutating class world. Setting up a new bare minimum Elm app should be quite simple, but it turns out that there are a few more steps required than one would expect. My first instinct – being a React guy – was to try &lt;code>yarn create elm-app&lt;/code> (or &lt;code>npx create-elm-app&lt;/code>), hoping it would do the Elm-equivalent of what &lt;code>create-react-app&lt;/code> does. Turns out, to my disappointment, that the end result leaves something to be desired. No proper live-reload out of the box, and a lot of the webpack stuff I was hoping to avoid completely with Elm. Yuck.&lt;/p></description></item><item><title>pretty-git-report – a CLI to give you daily commit metrics</title><link>https://cekrem.github.io/posts/git-report/</link><pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/git-report/</guid><description>&lt;h2 id="have-you-ever">Have you ever&amp;hellip;&lt;/h2>
&lt;ul>
&lt;li>Wanted to track your daily additions and deletions without leaving your beloved terminal?&lt;/li>
&lt;li>Busted your back piping &lt;code>git log {insert-hundred-flags}&lt;/code> through endless hoops trying to create a somewhat human readable and useful output?&lt;/li>
&lt;li>Wanted to use a functional node.js cli with an immoral amount of &lt;a href="https://ramdajs.com/">Rambda&lt;/a> usage? (Sorry about that, btw, I just wanted to see how far I could go. &lt;a href="https://github.com/cekrem/pretty-git-report/blob/master/index.js">Quite far&lt;/a>, it turns out!)&lt;/li>
&lt;li>Wished you would live to see a tool (any tool at all) that treverses a directory tree - :O – concurrently?&lt;/li>
&lt;/ul>
&lt;p>Then look no further. Lo and behold:&lt;/p></description></item></channel></rss>