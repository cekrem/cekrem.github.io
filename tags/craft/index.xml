<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Craft on cekrem.github.io</title><link>https://cekrem.github.io/tags/craft/</link><description>Recent content in Craft on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 26 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/craft/index.xml" rel="self" type="application/rss+xml"/><item><title>Programming as Theory Building: Why Senior Developers Are More Valuable Than Ever</title><link>https://cekrem.github.io/posts/programming-as-theory-building-naur/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/programming-as-theory-building-naur/</guid><description>&lt;p>In 1985, computer scientist Peter Naur wrote a prescient essay called &lt;a href="https://pages.cs.wisc.edu/~remzi/Naur.pdf" class="external-link" target="_blank" rel="noopener">&amp;ldquo;Programming as Theory Building&amp;rdquo;&lt;/a> that feels more relevant today than ever. As we watch junior developers reflexively accept LLM-generated code they don&amp;rsquo;t understand, and see codebases balloon with theoretically orphaned implementations, Naur&amp;rsquo;s central thesis becomes crystal clear: &lt;strong>a program is not its source code&lt;/strong>.&lt;/p>
&lt;h2 id="the-theory-behind-the-code">
 The Theory Behind the Code
 &lt;a class="heading-link" href="#the-theory-behind-the-code">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Naur argues that programming is fundamentally about building a theory—a &lt;strong>shared mental model&lt;/strong> of how a system works, why it works that way, and how it should evolve. The source code is merely a written representation of this theory, and like all representations, it&amp;rsquo;s lossy. Critical knowledge about intent, design decisions, trade-offs, and the reasoning behind architectural choices exists only in the minds of the people who built the system.&lt;/p></description></item><item><title>Claude Code: Game Changer or Just Hype?</title><link>https://cekrem.github.io/posts/claude-code-game-changer-or-just-hype/</link><pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/claude-code-game-changer-or-just-hype/</guid><description>&lt;p>Last week, I watched two very different developers encounter Claude Code for the first time. The contrast in their reactions perfectly captures the tension I&amp;rsquo;ve been feeling about AI coding assistants lately.&lt;/p>
&lt;p>For those unfamiliar, &lt;a href="https://www.anthropic.com/claude-code" class="external-link" target="_blank" rel="noopener">Claude Code&lt;/a> is Anthropic&amp;rsquo;s AI-powered coding assistant that can read, write, and edit code across your entire codebase. Unlike traditional autocomplete tools, it can understand context across multiple files, execute commands, run tests, and even browse the web for documentation. Think of it as having an AI pair programmer that never gets tired and has read every Stack Overflow answer ever written.&lt;/p></description></item><item><title>Coding as Craft: Going Back to the Old Gym</title><link>https://cekrem.github.io/posts/coding-as-craft-going-back-to-the-old-gym/</link><pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/coding-as-craft-going-back-to-the-old-gym/</guid><description>&lt;p>Recently, &lt;a href="https://x.com/tobi/status/1909231499448401946" class="external-link" target="_blank" rel="noopener">Shopify&amp;rsquo;s CEO Tobi Lütke shared his thoughts on AI&amp;rsquo;s role in coding&lt;/a>, stating that &amp;ldquo;reflexive AI usage is now a baseline expectation at Shopify.&amp;rdquo; The gist of his message was that AI is revolutionizing how we work, and everybody should jump on board this train or risk being left behind. I&amp;rsquo;m paraphrasing a bit, but not much – check out the post for complete context and content.&lt;/p>
&lt;p>This struck a chord with me, but not in the way he intended. In a Slack conversation with fellow Elm engineers, I found myself typing:&lt;/p></description></item></channel></rss>