<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Flow on cekrem.github.io</title><link>https://cekrem.github.io/tags/flow/</link><description>Recent content in Flow on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 08 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/flow/index.xml" rel="self" type="application/rss+xml"/><item><title>The Subtle Art of Taming Flows and Coroutines in Kotlin, or 'How Not to DDoS Yourself with Server-Sent Events'</title><link>https://cekrem.github.io/posts/the-subtle-art-of-taming-flows-and-coroutines-in-kotlin/</link><pubDate>Mon, 08 Sep 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/the-subtle-art-of-taming-flows-and-coroutines-in-kotlin/</guid><description>&lt;p&gt;I originally wanted to write a post about Server-Sent Events in general, and how delightfully cool they are. SSE provides a clean, standardized way for servers to push real-time updates to web clients over a simple HTTP connection. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" class="external-link" target="_blank" rel="noopener"&gt;MDN documentation&lt;/a&gt; showcases how straightforward the client-side implementation is, while &lt;a href="https://ktor.io/docs/server-server-sent-events.html" class="external-link" target="_blank" rel="noopener"&gt;Ktor&amp;rsquo;s SSE support&lt;/a&gt; makes the server-side equally elegant. SSE strikes a perfect balance: simpler than WebSockets when you only need one-way communication, yet more efficient than polling.&lt;/p&gt;</description></item></channel></rss>