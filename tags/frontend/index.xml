<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Frontend on cekrem.github.io</title><link>https://cekrem.github.io/tags/frontend/</link><description>Recent content in Frontend on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 16 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/frontend/index.xml" rel="self" type="application/rss+xml"/><item><title>HTML Helpers 2.0.0 for Elm: Stable conditionals and attributes</title><link>https://cekrem.github.io/posts/html-helpers-2-0-0-for-elm/</link><pubDate>Tue, 16 Sep 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/html-helpers-2-0-0-for-elm/</guid><description>&lt;p&gt;Back in May, I introduced a tiny Elm package of HTML utilities focused on reducing boilerplate and improving readability. Since then, I’ve been using it in a few projects and gathering feedback. Today I’m releasing version 2.0.0, which finalizes the core API: concise conditionals for single elements and attribute utilities—as well as the 1.x stuff for lists.&lt;/p&gt;
&lt;p&gt;If you want to skim the exact changes from 1.3.2 to 2.0.0, here’s the comparison: &lt;a href="https://github.com/cekrem/html-helpers/compare/1.3.2..2.0.0" class="external-link" target="_blank" rel="noopener"&gt;1.3.2..2.0.0&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Compiler-Driven Development: Building an Elm Playground That Compiles in the Browser</title><link>https://cekrem.github.io/posts/compiler-driven-development-elm-playground/</link><pubDate>Sun, 31 Aug 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/compiler-driven-development-elm-playground/</guid><description>&lt;p&gt;Sometimes the best solutions emerge from the ashes of failed approaches. This is the story of how I built &lt;a href="https://elm-playground.onrender.com" class="external-link" target="_blank" rel="noopener"&gt;elm-playground&lt;/a&gt; – an interactive Elm environment for teaching &amp;ldquo;compiler-driven development&amp;rdquo; – and how hitting memory limits forced me to discover something even better than my original plan.&lt;/p&gt;
&lt;h2 id="the-mission-teaching-compiler-driven-development"&gt;
 The Mission: Teaching Compiler-Driven Development
 &lt;a class="heading-link" href="#the-mission-teaching-compiler-driven-development"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been planning to host an Elm workshop at &lt;a href="https://enso.no" class="external-link" target="_blank" rel="noopener"&gt;Ensō&lt;/a&gt; with a specific theme: &amp;ldquo;Compiler-driven development.&amp;rdquo; The idea is to showcase how Elm&amp;rsquo;s famously friendly compiler can guide your development process, catching errors before they become runtime surprises and helping you write better code through its helpful error messages.&lt;/p&gt;</description></item><item><title>Pragmatic Hacks: When 'Good Enough' is Actually Good Enough</title><link>https://cekrem.github.io/posts/pragmatic-hacks-search-widget-elm/</link><pubDate>Mon, 23 Jun 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/pragmatic-hacks-search-widget-elm/</guid><description>&lt;p&gt;Sometimes the best solution isn&amp;rsquo;t the most elegant one. Sometimes it&amp;rsquo;s the one that works, ships quickly, and solves the problem at hand. This is the story of how I built a search widget for my blog using what purists might call &amp;ldquo;hacks&amp;rdquo; – and why that was exactly the right choice.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t already I suggest you check out &lt;a href="https://cekrem.github.io/posts/starting-small-with-elm-a-widget-approach/" &gt;Starting Small with Elm: A Widget Approach&lt;/a&gt; for some context; that&amp;rsquo;s where this Elm widget stuff all begun.&lt;/p&gt;</description></item><item><title>Starting Small with Elm: A Widget Approach</title><link>https://cekrem.github.io/posts/starting-small-with-elm-a-widget-approach/</link><pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/starting-small-with-elm-a-widget-approach/</guid><description>&lt;p&gt;It&amp;rsquo;s awesome to learn Elm by building a side project, you absolutely should. And maybe you have – perhaps you&amp;rsquo;ve built a todo app, explored The Elm Architecture, and fallen in love with the reliability and maintainability that comes with functional programming and strong types.&lt;/p&gt;
&lt;p&gt;But come Monday morning, you&amp;rsquo;re back to wrestling with JavaScript bugs, runtime errors, and the nagging feeling that there has to be a better way. The problem isn&amp;rsquo;t that Elm isn&amp;rsquo;t ready for production work – it absolutely is. The problem is convincing your team, your boss, or your organization to take the leap. And when you&amp;rsquo;re thinking about wholesale replacement, your boss&amp;rsquo;s skepticism might be quite healthy. But here&amp;rsquo;s the thing: if you reduce the scope, you can also reduce the risk and buy-in required. Instead of &amp;ldquo;let&amp;rsquo;s rebuild our entire app in Elm,&amp;rdquo; what if the conversation was &amp;ldquo;let&amp;rsquo;s try Elm for this one small widget&amp;rdquo;? Suddenly, the stakes drop dramatically.&lt;/p&gt;</description></item><item><title>A Use Case for Port Boundaries in Frontend Development</title><link>https://cekrem.github.io/posts/a-case-for-port-boundaries-in-frontend/</link><pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/a-case-for-port-boundaries-in-frontend/</guid><description>&lt;p&gt;In the Elm ecosystem, the browser is treated like an I/O device. DOM events, JavaScript interop, and even network requests are kept outside the core logic. Rather than allowing side effects to permeate the codebase, Elm channels them through strictly typed boundaries known as &lt;em&gt;ports&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This architectural stance is both radical and liberating. It allows you to build user interfaces where logic remains pure, testable, and robust, even as surrounding technologies evolve.&lt;/p&gt;</description></item><item><title>Introducing HTML Helpers for Elm</title><link>https://cekrem.github.io/posts/introducing-html-helpers-for-elm/</link><pubDate>Tue, 06 May 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/introducing-html-helpers-for-elm/</guid><description>&lt;p&gt;As I continue to build more Elm applications, I find myself creating small utility functions to overcome common pain points. I&amp;rsquo;m a big fan of abstracting away repetitive patterns into reusable, well-named functions. Today, I&amp;rsquo;m happy to announce the release of my first public Elm package: &lt;a href="https://package.elm-lang.org/packages/cekrem/html-helpers/latest/" class="external-link" target="_blank" rel="noopener"&gt;html-helpers&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="whats-the-problem"&gt;
 What&amp;rsquo;s the Problem?
 &lt;a class="heading-link" href="#whats-the-problem"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Elm&amp;rsquo;s HTML API is quite straightforward - you create HTML elements as functions, pass them attributes and children, and compose them together. But a few cases come up repeatedly that can be awkward:&lt;/p&gt;</description></item><item><title>Building Better UI Components: Elm Ports with Web Components</title><link>https://cekrem.github.io/posts/elm-ports-with-web-components/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/elm-ports-with-web-components/</guid><description>&lt;p&gt;One of the most common questions I get about Elm is: &amp;ldquo;How do I integrate it with existing JavaScript ecosystems?&amp;rdquo; While Elm&amp;rsquo;s isolation is a strength, real-world projects often require working with external libraries, APIs, or UI components. Doing incremental migration is also the recommended way to introduce Elm, and luckily there are may ways to accomplish this.&lt;/p&gt;
&lt;p&gt;Today, I&amp;rsquo;ll show you how to combine two powerful technologies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Elm Ports&lt;/strong&gt;: The official way to communicate between Elm and JavaScript&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web Components&lt;/strong&gt;: Standard, framework-agnostic UI components&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This combination gives us the best of both worlds: Elm&amp;rsquo;s type safety and predictable architecture alongside the reusability and interoperability of Web Components. Let&amp;rsquo;s dive in!&lt;/p&gt;</description></item><item><title>Why I Hope I Get to Write a Lot of Elm Code in 2025</title><link>https://cekrem.github.io/posts/why-i-hope-i-get-to-write-a-lot-of-elm-code-in-2025/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/why-i-hope-i-get-to-write-a-lot-of-elm-code-in-2025/</guid><description>&lt;p&gt;In a world dominated by React, Vue, and Svelte, it might seem strange to highlight Elm – a niche language that has existed since 2012 but has had fewer releases since then than React has in a year. But right now, when frontend development is becoming increasingly complex, and clients are doing heavy lifting that previously belonged on the other side of an API call, it&amp;rsquo;s worth taking a closer look at what Elm does right.&lt;/p&gt;</description></item></channel></rss>