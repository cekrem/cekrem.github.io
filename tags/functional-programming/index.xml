<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Programming on cekrem.github.io</title><link>https://cekrem.github.io/tags/functional-programming/</link><description>Recent content in Functional Programming on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 19 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Building Better UI Components: Elm Ports with Web Components</title><link>https://cekrem.github.io/posts/elm-ports-with-web-components/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/elm-ports-with-web-components/</guid><description>&lt;p>One of the most common questions I get about Elm is: &amp;ldquo;How do I integrate it with existing JavaScript ecosystems?&amp;rdquo; While Elm&amp;rsquo;s isolation is a strength, real-world projects often require working with external libraries, APIs, or UI components. Doing incremental migration is also the recommended way to introduce Elm, and luckily there are may ways to accomplish this.&lt;/p>
&lt;p>Today, I&amp;rsquo;ll show you how to combine two powerful technologies:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Elm Ports&lt;/strong>: The official way to communicate between Elm and JavaScript&lt;/li>
&lt;li>&lt;strong>Web Components&lt;/strong>: Standard, framework-agnostic UI components&lt;/li>
&lt;/ol>
&lt;p>This combination gives us the best of both worlds: Elm&amp;rsquo;s type safety and predictable architecture alongside the reusability and interoperability of Web Components. Let&amp;rsquo;s dive in!&lt;/p></description></item><item><title>Feedback.one: A Refreshing Take on User Feedback Built with Elm and Rust</title><link>https://cekrem.github.io/posts/feedback-one-elm-rust-feedback-widget/</link><pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/feedback-one-elm-rust-feedback-widget/</guid><description>&lt;p>I recently added a new feedback widget to this site – &lt;a href="https://feedback.one/" class="external-link" target="_blank" rel="noopener">Feedback.one&lt;/a> – and I&amp;rsquo;m impressed enough with it that I thought it deserved its own post. Beyond being a useful tool, it&amp;rsquo;s also an excellent example of how functional programming languages like Elm can shine in production environments.&lt;/p>
&lt;h2 id="what-is-feedbackone">
 What is Feedback.one?
 &lt;a class="heading-link" href="#what-is-feedbackone">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>At its core, Feedback.one is a simple but powerful tool that adds a non-intrusive feedback button to your website. With one line of code, you get:&lt;/p></description></item><item><title>Why I Hope I Get to Write a Lot of Elm Code in 2025</title><link>https://cekrem.github.io/posts/why-i-hope-i-get-to-write-a-lot-of-elm-code-in-2025/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/why-i-hope-i-get-to-write-a-lot-of-elm-code-in-2025/</guid><description>&lt;p>In a world dominated by React, Vue, and Svelte, it might seem strange to highlight Elm – a niche language that has existed since 2012 but has had fewer releases since then than React has in a year. But right now, when frontend development is becoming increasingly complex, and clients are doing heavy lifting that previously belonged on the other side of an API call, it&amp;rsquo;s worth taking a closer look at what Elm does right.&lt;/p></description></item></channel></rss>