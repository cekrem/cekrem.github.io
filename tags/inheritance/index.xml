<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Inheritance on cekrem.github.io</title><link>https://cekrem.github.io/tags/inheritance/</link><description>Recent content in Inheritance on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 21 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/inheritance/index.xml" rel="self" type="application/rss+xml"/><item><title>Liskov Substitution: The Real Meaning of Inheritance</title><link>https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance/</link><pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>After exploring &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go">Dependency Inversion&lt;/a> and &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice">Interface Segregation&lt;/a>, let&amp;rsquo;s tackle perhaps the most misunderstood principle of SOLID: The Liskov Substitution Principle (LSP).&lt;/p>
&lt;p>Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong>software architecture&lt;/strong> in his classic &lt;a href="https://amzn.to/4iAc8o1">Clean Architecture&lt;/a>! That book is my primary inspiration for this series. Without clean architecture, we&amp;rsquo;ll all be building firmware (my paraphrased summary).&lt;/p>
&lt;blockquote>
&lt;p>The Liskov Substitution Principle states that if S is a subtype of T, then objects of type T may be replaced with objects of type S without altering any of the desirable properties of the program.&lt;/p></description></item></channel></rss>