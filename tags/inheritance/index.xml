<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Inheritance on cekrem.github.io</title><link>https://cekrem.github.io/tags/inheritance/</link><description>Recent content in Inheritance on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 21 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/inheritance/index.xml" rel="self" type="application/rss+xml"/><item><title>Liskov Substitution: The Real Meaning of Inheritance</title><link>https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance/</link><pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;After exploring &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" &gt;Dependency Inversion&lt;/a&gt; and &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" &gt;Interface Segregation&lt;/a&gt;, let&amp;rsquo;s tackle perhaps the most misunderstood principle of SOLID: The Liskov Substitution Principle (LSP).&lt;/p&gt;
&lt;p&gt;Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong&gt;software architecture&lt;/strong&gt; in his classic &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener"&gt;Clean Architecture&lt;/a&gt;! That book is my primary inspiration for this series. Without clean architecture, we&amp;rsquo;ll all be building firmware (my paraphrased summary).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Liskov Substitution Principle states that if S is a subtype of T, then objects of type T may be replaced with objects of type S without altering any of the desirable properties of the program.&lt;/p&gt;</description></item></channel></rss>