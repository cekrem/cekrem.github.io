<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin on cekrem.github.io</title><link>https://cekrem.github.io/tags/kotlin/</link><description>Recent content in Kotlin on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 08 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Kotlin's Rich Errors: Native, Typed Errors Without Exceptions</title><link>https://cekrem.github.io/posts/kotlin-rich-errors-elm-union-types/</link><pubDate>Fri, 08 Aug 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/kotlin-rich-errors-elm-union-types/</guid><description>&lt;p>At KotlinConf 2025, the Kotlin team showcased progress toward &lt;strong>Rich Errors&lt;/strong> with union types. After years of watching languages slowly adopt patterns that Elm has championed since day one, it&amp;rsquo;s exciting to see Kotlin taking this significant step toward more explicit, type-safe error handling. And in a very &amp;ldquo;native&amp;rdquo; Kotlin way at that!&lt;/p>
&lt;p>I vividly remember this announcement giving my functional heart a pleasant jolt, but I haven&amp;rsquo;t found the time for a write-up until now. Better late than never, though:&lt;/p></description></item><item><title>On the Value of Abstractions</title><link>https://cekrem.github.io/posts/on-the-value-of-abstractions/</link><pubDate>Thu, 07 Aug 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/on-the-value-of-abstractions/</guid><description>&lt;p>Most of my day-to-day work is in Elm. The combination of a functional language and the Elm Architecture makes many architectural decisions almost invisible (I talk more about that &lt;a href="https://cekrem.github.io/posts/why-i-hope-i-get-to-write-a-lot-of-elm-code-in-2025/#the-elm-architecture-vs-clean-architecture" >in this blog post&lt;/a>). You get a clear separation of concerns, and the language nudges you toward good design by default.&lt;/p>
&lt;p>But my work isn’t limited to Elm. I frequently find myself building features that span both frontend and backend—writing new endpoints, and sometimes even designing new database tables. When I step outside the Elm world, I’m reminded that architecture is something I have to be intentional about again.&lt;/p></description></item><item><title>Refactoring Towards Cleaner Boundaries: Lessons from Building a Markdown Blog Engine (Part 3)</title><link>https://cekrem.github.io/posts/refactoring-towards-cleaner-boundaries/</link><pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/refactoring-towards-cleaner-boundaries/</guid><description>&lt;p>In &lt;a href="https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture" >part 1&lt;/a>, we laid out our Clean Architecture vision. In &lt;a href="https://cekrem.github.io/posts/double-loop-tdd-blog-engine-pt2" >part 2&lt;/a>, we explored Double Loop TDD. Today, we dive into the &lt;strong>refactoring journey&lt;/strong> that emerged from implementing these principles.&lt;/p>
&lt;p>The source code at the time of writing is &lt;a href="https://github.com/cekrem/clean-blog/tree/v0.3" class="external-link" target="_blank" rel="noopener">available on GitHub&lt;/a>.&lt;/p>
&lt;h2 id="the-controller-conundrum">
 The Controller Conundrum
 &lt;a class="heading-link" href="#the-controller-conundrum">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>One of the most significant architectural changes in this iteration was moving the &lt;code>ContentController&lt;/code> from the infrastructure layer to the &lt;strong>interface adapters layer&lt;/strong>. This shift better aligns with Clean Architecture principles:&lt;/p></description></item><item><title>Double Loop TDD: Building My Blog Engine the Right Way (part 2)</title><link>https://cekrem.github.io/posts/double-loop-tdd-blog-engine-pt2/</link><pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/double-loop-tdd-blog-engine-pt2/</guid><description>&lt;h2 id="from-hugo-to-kotlin-the-journey-continues">
 From Hugo to Kotlin: The Journey Continues
 &lt;a class="heading-link" href="#from-hugo-to-kotlin-the-journey-continues">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>In my &lt;a href="https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture" >previous post&lt;/a>, embarked on a bold and ambitious journey to replace Hugo with a custom Kotlin-based blog engine built using Clean Architecture principles (to the letter!). Today, I want to dive deeper into the development process, specifically how I&amp;rsquo;m using &lt;strong>Double Loop TDD&lt;/strong> to ensure the quality and maintainability of the system. Again, I&amp;rsquo;m trying to go all-in, basically to see how far is too far, and to learn and explore.&lt;/p></description></item><item><title>Making a Clean Architecture Blog Engine From Scratch pt 1</title><link>https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture/</guid><description>&lt;h2 id="lets-make-a-blog-engine-ey">
 Let&amp;rsquo;s make a blog engine, ey?
 &lt;a class="heading-link" href="#lets-make-a-blog-engine-ey">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Don&amp;rsquo;t get me wrong - &lt;a href="https://gohugo.io/" class="external-link" target="_blank" rel="noopener">Hugo&lt;/a> (the stuff that I&amp;rsquo;m currently using to drive this site) is great. It&amp;rsquo;s blazing fast, feature-rich, and battle-tested. But as a developer who&amp;rsquo;s been diving deep into Clean Architecture lately (as you might have noticed from my &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" >recent&lt;/a> &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" >posts&lt;/a>), I&amp;rsquo;ve been itching to apply these principles to a real project. And what better way to learn than by potentially over-engineering my own blog engine?&lt;/p></description></item><item><title>A Use Case for `UseCase`s in Kotlin</title><link>https://cekrem.github.io/posts/a-use-case-for-usecases-in-kotlin/</link><pubDate>Fri, 31 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/a-use-case-for-usecases-in-kotlin/</guid><description>&lt;h2 id="my-first-encounter-with-a-kotlin-usecase">
 My First Encounter with a Kotlin &lt;code>UseCase&lt;/code>
 &lt;a class="heading-link" href="#my-first-encounter-with-a-kotlin-usecase">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>One of my responsibilities as an Android Developer in Vipps (Mobilepay) was to do tech interviews. After a while, I also made the tech assignments and changed the recruitment process a bit. But in the earlier days, we used a standard &amp;ldquo;build X using Y&amp;rdquo;, where &amp;ldquo;Y&amp;rdquo; was modern Android tools (preferably Compose), and &amp;ldquo;X&amp;rdquo; was some non-descript hello world-ish app that did something I can&amp;rsquo;t for the life of me remember. During one of the tech task evaluations we did prior to an interview, I encountered a strange animal completely unknown to me. A &lt;code>UseCase&lt;/code> class, with an &lt;code>operator fun invoke()&lt;/code> method.&lt;/p></description></item><item><title>Liskov Substitution: The Real Meaning of Inheritance</title><link>https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance/</link><pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance/</guid><description>&lt;h2 id="introduction">
 Introduction
 &lt;a class="heading-link" href="#introduction">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>After exploring &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" >Dependency Inversion&lt;/a> and &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" >Interface Segregation&lt;/a>, let&amp;rsquo;s tackle perhaps the most misunderstood principle of SOLID: The Liskov Substitution Principle (LSP).&lt;/p>
&lt;p>Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong>software architecture&lt;/strong> in his classic &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener">Clean Architecture&lt;/a>! That book is my primary inspiration for this series. Without clean architecture, we&amp;rsquo;ll all be building firmware (my paraphrased summary).&lt;/p>
&lt;blockquote>
&lt;p>The Liskov Substitution Principle states that if S is a subtype of T, then objects of type T may be replaced with objects of type S without altering any of the desirable properties of the program.&lt;/p></description></item><item><title>Going back(end) to the old gym!</title><link>https://cekrem.github.io/posts/back-to-the-old-gym/</link><pubDate>Mon, 12 Feb 2024 08:45:30 +0100</pubDate><guid>https://cekrem.github.io/posts/back-to-the-old-gym/</guid><description>&lt;p>&lt;strong>Update: After some heavy lifting at the old gym, I actually left Vipps and started on a Sabbatical. See &lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:7233757597424615424/" class="external-link" target="_blank" rel="noopener">Goodbye Vipps!&lt;/a> for details (LinkedIn post).&lt;/strong> I&amp;rsquo;m also &lt;a href="https://cekrem.github.io/hire" >open for new opportunities&lt;/a>.&lt;/p>
&lt;h6 id="timeline-from-backend-to-android---dev-plan-2021-2023---nailing-it-and-getting-promoted---back-to-the-old-gym---sabbatical---my-next-adventure">
 Timeline: &lt;a href="https://cekrem.github.io/posts/changing-jobs-without-leaving-your-company/" >From backend to Android&lt;/a> -&amp;gt; &lt;a href="https://cekrem.github.io/posts/devplan/" >Dev plan 2021-2023&lt;/a> -&amp;gt; &lt;a href="https://cekrem.github.io/posts/the-end-of-an-era/" >Nailing it and getting promoted!&lt;/a> -&amp;gt; &lt;a href="#" >Back to the old gym!&lt;/a> -&amp;gt; &lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:7233757597424615424/" class="external-link" target="_blank" rel="noopener">Sabbatical!&lt;/a> -&amp;gt; &lt;a href="https://cekrem.github.io/hire" >My next adventure?&lt;/a>
 &lt;a class="heading-link" href="#timeline-from-backend-to-android---dev-plan-2021-2023---nailing-it-and-getting-promoted---back-to-the-old-gym---sabbatical---my-next-adventure">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h6>
&lt;p>It&amp;rsquo;s official! I&amp;rsquo;m transitioning back from &lt;a href="https://cekrem.github.io/posts/changing-jobs-without-leaving-your-company" >my pilgrimage as an Android developer&lt;/a>, going back to my backend roots. Ah, the glorious smell of rusty metal, engine oil and buzzing CRT monitors running nothing but &lt;code>vim&lt;/code>. The bonus is I still get to do Android! &lt;strong>More importantly, though, I&amp;rsquo;m back to working 80%&lt;/strong>. Sweet, glorious Jesus, YES! And there&amp;rsquo;s actually deeper stuff going on beneath the surface as well. Paradigm shift: √&lt;/p></description></item><item><title>Changing Jobs Without Leaving Your Company</title><link>https://cekrem.github.io/posts/changing-jobs-without-leaving-your-company/</link><pubDate>Tue, 21 Jun 2022 07:00:15 +0200</pubDate><guid>https://cekrem.github.io/posts/changing-jobs-without-leaving-your-company/</guid><description>&lt;p>So you&amp;rsquo;ve been at your company for a couple of years. Your parents tell you to stick around for another five, but other people in tech - and your adventurous self - tell you it&amp;rsquo;s about time to learn something new. What if you could do both? The most common path to take in order to learn something new, advance your career, increase your salary or simply Change Things Up A Bit involves leaving your company for something else. This is especially true in tech. (Sadly, the salary part is &lt;em>especially&lt;/em> true in tech; to the point where just about the only way to get a raise is to &lt;em>say&lt;/em> that you&amp;rsquo;re leaving for a better deal, and either take the deal or the inevitable counter-offer from your current workplace. Not cool.)&lt;/p></description></item></channel></rss>