<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ktor on cekrem.github.io</title><link>https://cekrem.github.io/tags/ktor/</link><description>Recent content in Ktor on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 08 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/ktor/index.xml" rel="self" type="application/rss+xml"/><item><title>The Subtle Art of Taming Flows and Coroutines in Kotlin, or 'How Not to DDoS Yourself with Server-Sent Events'</title><link>https://cekrem.github.io/posts/the-subtle-art-of-taming-flows-and-coroutines-in-kotlin/</link><pubDate>Mon, 08 Sep 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/the-subtle-art-of-taming-flows-and-coroutines-in-kotlin/</guid><description>&lt;p&gt;I originally wanted to write a post about Server-Sent Events in general, and how delightfully cool they are. SSE provides a clean, standardized way for servers to push real-time updates to web clients over a simple HTTP connection. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" class="external-link" target="_blank" rel="noopener"&gt;MDN documentation&lt;/a&gt; showcases how straightforward the client-side implementation is, while &lt;a href="https://ktor.io/docs/server-server-sent-events.html" class="external-link" target="_blank" rel="noopener"&gt;Ktor&amp;rsquo;s SSE support&lt;/a&gt; makes the server-side equally elegant. SSE strikes a perfect balance: simpler than WebSockets when you only need one-way communication, yet more efficient than polling.&lt;/p&gt;</description></item><item><title>Making a Clean Architecture Blog Engine From Scratch pt 1</title><link>https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture/</guid><description>&lt;h2 id="lets-make-a-blog-engine-ey"&gt;
 Let&amp;rsquo;s make a blog engine, ey?
 &lt;a class="heading-link" href="#lets-make-a-blog-engine-ey"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Don&amp;rsquo;t get me wrong - &lt;a href="https://gohugo.io/" class="external-link" target="_blank" rel="noopener"&gt;Hugo&lt;/a&gt; (the stuff that I&amp;rsquo;m currently using to drive this site) is great. It&amp;rsquo;s blazing fast, feature-rich, and battle-tested. But as a developer who&amp;rsquo;s been diving deep into Clean Architecture lately (as you might have noticed from my &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" &gt;recent&lt;/a&gt; &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" &gt;posts&lt;/a&gt;), I&amp;rsquo;ve been itching to apply these principles to a real project. And what better way to learn than by potentially over-engineering my own blog engine?&lt;/p&gt;</description></item></channel></rss>