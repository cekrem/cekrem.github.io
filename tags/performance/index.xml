<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance on cekrem.github.io</title><link>https://cekrem.github.io/tags/performance/</link><description>Recent content in Performance on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 08 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>The Subtle Art of Taming Flows and Coroutines in Kotlin, or 'How Not to DDoS Yourself with Server-Sent Events'</title><link>https://cekrem.github.io/posts/the-subtle-art-of-taming-flows-and-coroutines-in-kotlin/</link><pubDate>Mon, 08 Sep 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/the-subtle-art-of-taming-flows-and-coroutines-in-kotlin/</guid><description>&lt;p&gt;I originally wanted to write a post about Server-Sent Events in general, and how delightfully cool they are. SSE provides a clean, standardized way for servers to push real-time updates to web clients over a simple HTTP connection. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" class="external-link" target="_blank" rel="noopener"&gt;MDN documentation&lt;/a&gt; showcases how straightforward the client-side implementation is, while &lt;a href="https://ktor.io/docs/server-server-sent-events.html" class="external-link" target="_blank" rel="noopener"&gt;Ktor&amp;rsquo;s SSE support&lt;/a&gt; makes the server-side equally elegant. SSE strikes a perfect balance: simpler than WebSockets when you only need one-way communication, yet more efficient than polling.&lt;/p&gt;</description></item><item><title>React Reconciliation: The Hidden Engine Behind Your Components</title><link>https://cekrem.github.io/posts/react-reconciliation-deep-dive/</link><pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/react-reconciliation-deep-dive/</guid><description>&lt;h5 id="update-while-simplifying-a-complex-code-example-shortly-before-publishing-i-messed-up-some-details-thanks-to-reader-feedback-for-pointing-this-out-im-very-grateful-i-also-messed-up-an-internal-link-but-thats-fixed-as-well-thanks-again"&gt;
 Update: While simplifying a complex code example shortly before publishing, I messed up some details. Thanks to reader feedback for pointing this out, I&amp;rsquo;m very grateful! I also messed up an internal link, but that&amp;rsquo;s fixed as well. Thanks again
 &lt;a class="heading-link" href="#update-while-simplifying-a-complex-code-example-shortly-before-publishing-i-messed-up-some-details-thanks-to-reader-feedback-for-pointing-this-out-im-very-grateful-i-also-messed-up-an-internal-link-but-thats-fixed-as-well-thanks-again"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h5&gt;
&lt;h2 id="the-reconciliation-engine"&gt;
 The Reconciliation Engine
 &lt;a class="heading-link" href="#the-reconciliation-engine"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In my previous articles (&lt;a href="https://cekrem.github.io/posts/beyond-react-memo-smarter-performance-optimization/" &gt;1&lt;/a&gt;, &lt;a href="https://cekrem.github.io/posts/react-memo-when-it-helps-when-it-hurts/" &gt;2&lt;/a&gt;), I explored how &lt;code&gt;React.memo&lt;/code&gt; works and smarter ways to optimize performance through composition. But to truly master React performance, we need to understand the engine that powers it all: React&amp;rsquo;s reconciliation algorithm.&lt;/p&gt;</description></item><item><title>React.memo Demystified: When It Helps and When It Hurts</title><link>https://cekrem.github.io/posts/react-memo-when-it-helps-when-it-hurts/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/react-memo-when-it-helps-when-it-hurts/</guid><description>&lt;h2 id="the-promise-of-memoization"&gt;
 The Promise of Memoization
 &lt;a class="heading-link" href="#the-promise-of-memoization"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;When React applications start to slow down, &lt;code&gt;React.memo&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, and &lt;code&gt;useCallback&lt;/code&gt; are often the first tools developers reach for. After all, preventing unnecessary re-renders seems like a straightforward path to better performance. But in the React ecosystem, memoization is far more complex than it first appears.&lt;/p&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll look at how these tools actually work under the hood, the subtle ways they can fail, and when they&amp;rsquo;re truly beneficial versus when they&amp;rsquo;re just adding unnecessary complexity.&lt;/p&gt;</description></item><item><title>Introducing `content-visibility: auto` - A Hidden Performance Gem</title><link>https://cekrem.github.io/posts/content-visibility-auto-performance/</link><pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/content-visibility-auto-performance/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;When dealing with large lists or complex DOM structures, performance optimization often feels like a complex puzzle. But sometimes, the simplest solutions are the most effective. Enter &lt;code&gt;content-visibility: auto&lt;/code&gt; - a CSS property that can dramatically improve rendering performance with minimal effort.&lt;/p&gt;
&lt;p&gt;You can (and IMHO should) read all about it &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility" class="external-link" target="_blank" rel="noopener"&gt;here&lt;/a&gt;! ðŸ¤“&lt;/p&gt;
&lt;h2 id="the-magic-of-content-visibility-auto"&gt;
 The Magic of content-visibility: auto
 &lt;a class="heading-link" href="#the-magic-of-content-visibility-auto"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;content-visibility: auto&lt;/code&gt; tells the browser to skip rendering elements that are not currently visible in the viewport. It&amp;rsquo;s like having a virtual scroll implementation, but without the complexity of managing scroll positions or item heights manually.&lt;/p&gt;</description></item><item><title>Beyond React.memo: Smarter Ways to Optimize Performance</title><link>https://cekrem.github.io/posts/beyond-react-memo-smarter-performance-optimization/</link><pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/beyond-react-memo-smarter-performance-optimization/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;When it comes to React performance optimization, &lt;code&gt;React.memo&lt;/code&gt; is often the first tool developers reach for. It&amp;rsquo;s the hammer we grab when we notice re-render issues, and suddenly everything looks like a nail. But what if I told you that in many cases, there are simpler, more elegant solutions that align better with React&amp;rsquo;s compositional nature?&lt;/p&gt;
&lt;p&gt;Today, I want to explore some fundamental concepts about how React renders components and share composition patterns that can dramatically improve performance without the complexity and gotchas of memoization.&lt;/p&gt;</description></item></channel></rss>