<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plugin on cekrem.github.io</title><link>https://cekrem.github.io/tags/plugin/</link><description>Recent content in Plugin on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 07 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>Clean Architecture: A Practical Example of Dependency Inversion in Go using Plugins</title><link>https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go/</link><pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go/</guid><description>&lt;h2 id="introduction">
 Introduction
 &lt;a class="heading-link" href="#introduction">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;strong>Update: this has become a series, the next entry can be found here: &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice/" >Interface Segregation: Why Your Interfaces Should Be Small and Focused&lt;/a>&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;ve lately enjoyed revisiting the &lt;a href="//en.wikipedia.org/wiki/SOLID" class="external-link" target="_blank" rel="noopener">SOLID Design Principles&lt;/a>. In the world of software architecture, few principles have stood the test of time like these. I find the &amp;ldquo;Dependency Inversion Principle&amp;rdquo; particularly interesting, as it&amp;rsquo;s one of the few that are either forgotten in modern applications, or drowned in so much over-engineering that the cost/benefit equation is offset anyways.&lt;/p></description></item></channel></rss>