<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on cekrem.github.io</title><link>https://cekrem.github.io/tags/react/</link><description>Recent content in React on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 19 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>A Use Case for Port Boundaries in Frontend Development</title><link>https://cekrem.github.io/posts/a-case-for-port-boundaries-in-frontend/</link><pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/a-case-for-port-boundaries-in-frontend/</guid><description>&lt;p>In the Elm ecosystem, the browser is treated like an I/O device. DOM events, JavaScript interop, and even network requests are kept outside the core logic. Rather than allowing side effects to permeate the codebase, Elm channels them through strictly typed boundaries known as &lt;em>ports&lt;/em>.&lt;/p>
&lt;p>This architectural stance is both radical and liberating. It allows you to build user interfaces where logic remains pure, testable, and robust, even as surrounding technologies evolve.&lt;/p></description></item><item><title>Dependency Inversion in React: Building Truly Testable Components</title><link>https://cekrem.github.io/posts/dependency-inversion-in-react/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/dependency-inversion-in-react/</guid><description>&lt;p>In the world of React development, we often find ourselves writing components that are tightly coupled to their dependencies. This makes testing difficult, maintenance a challenge, and change nearly impossible. The Dependency Inversion Principle (DIP) offers a way out of this mess, but how do we apply it effectively &lt;strong>in React&lt;/strong>?&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> For a more backend-oriented take on Dependency Inversion, check out my previous post on &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go/">Dependency Inversion in Go Using Plugins&lt;/a>.&lt;/p></description></item><item><title>The Psychology of Clean Code: Why We Write Messy React Components</title><link>https://cekrem.github.io/posts/psychology-of-clean-code/</link><pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/psychology-of-clean-code/</guid><description>&lt;p>We all know we should write clean code. We&amp;rsquo;ve read the books, attended the talks, and nodded along to the principles. Yet, somehow, we still find ourselves writing messy React components. Why is that? The answer lies not in our technical skills, but in our psychology.&lt;/p>
&lt;h2 id="the-cognitive-load-trap">The Cognitive Load Trap&lt;/h2>
&lt;p>Consider this common scenario:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">const&lt;/span> UserDashboard = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [users, setUsers] = useState([]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [loading, setLoading] = useState(&lt;span style="font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [error, setError] = useState(&lt;span style="font-weight:bold">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [filter, setFilter] = useState(&lt;span style="font-style:italic">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [sortBy, setSortBy] = useState(&lt;span style="font-style:italic">&amp;#34;name&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [page, setPage] = useState(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> [totalPages, setTotalPages] = useState(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fetchUsers();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, [filter, sortBy, page]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> fetchUsers = &lt;span style="font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setLoading(&lt;span style="font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> response = &lt;span style="font-weight:bold">await&lt;/span> fetch(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">`/api/users?filter=&lt;/span>&lt;span style="font-weight:bold;font-style:italic">${&lt;/span>filter&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic">&amp;amp;sort=&lt;/span>&lt;span style="font-weight:bold;font-style:italic">${&lt;/span>sortBy&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic">&amp;amp;page=&lt;/span>&lt;span style="font-weight:bold;font-style:italic">${&lt;/span>page&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> data = &lt;span style="font-weight:bold">await&lt;/span> response.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setUsers(data.users);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setTotalPages(data.totalPages);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="font-weight:bold">catch&lt;/span> (err) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setError(err.message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="font-weight:bold">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setLoading(&lt;span style="font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> handleFilterChange = (e) =&amp;gt; setFilter(e.target.value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> handleSortChange = (e) =&amp;gt; setSortBy(e.target.value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">const&lt;/span> handlePageChange = (newPage) =&amp;gt; setPage(newPage);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> (loading) &lt;span style="font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="font-weight:bold">LoadingSpinner&lt;/span> /&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> (error) &lt;span style="font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="font-weight:bold">ErrorMessage&lt;/span> error={error} /&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="font-weight:bold">FilterBar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter={filter}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onFilterChange={handleFilterChange}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sortBy={sortBy}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onSortChange={handleSortChange}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="font-weight:bold">UserList&lt;/span> users={users} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="font-weight:bold">Pagination&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentPage={page}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> totalPages={totalPages}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onPageChange={handlePageChange}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This component isn&amp;rsquo;t terrible, but it&amp;rsquo;s not great either. It&amp;rsquo;s doing too much, handling too many concerns, and will be difficult to maintain. Yet, it&amp;rsquo;s exactly the kind of component we write when we&amp;rsquo;re under pressure or trying to move fast.&lt;/p></description></item><item><title>React Reconciliation: The Hidden Engine Behind Your Components</title><link>https://cekrem.github.io/posts/react-reconciliation-deep-dive/</link><pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/react-reconciliation-deep-dive/</guid><description>&lt;h5 id="update-while-simplifying-a-complex-code-example-shortly-before-publishing-i-messed-up-some-details-thanks-to-reader-feedback-for-pointing-this-out-im-very-grateful-i-also-messed-up-an-internal-link-but-thats-fixed-as-well-thanks-again">Update: While simplifying a complex code example shortly before publishing, I messed up some details. Thanks to reader feedback for pointing this out, I&amp;rsquo;m very grateful! I also messed up an internal link, but that&amp;rsquo;s fixed as well. Thanks again&lt;/h5>
&lt;h2 id="the-reconciliation-engine">The Reconciliation Engine&lt;/h2>
&lt;p>In my previous articles (&lt;a href="https://cekrem.github.io/posts/beyond-react-memo-smarter-performance-optimization/">1&lt;/a>, &lt;a href="https://cekrem.github.io/posts/react-memo-when-it-helps-when-it-hurts/">2&lt;/a>), I explored how &lt;code>React.memo&lt;/code> works and smarter ways to optimize performance through composition. But to truly master React performance, we need to understand the engine that powers it all: React&amp;rsquo;s reconciliation algorithm.&lt;/p></description></item><item><title>React.memo Demystified: When It Helps and When It Hurts</title><link>https://cekrem.github.io/posts/react-memo-when-it-helps-when-it-hurts/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/react-memo-when-it-helps-when-it-hurts/</guid><description>&lt;h2 id="the-promise-of-memoization">The Promise of Memoization&lt;/h2>
&lt;p>When React applications start to slow down, &lt;code>React.memo&lt;/code>, &lt;code>useMemo&lt;/code>, and &lt;code>useCallback&lt;/code> are often the first tools developers reach for. After all, preventing unnecessary re-renders seems like a straightforward path to better performance. But in the React ecosystem, memoization is far more complex than it first appears.&lt;/p>
&lt;p>In this post, we&amp;rsquo;ll look at how these tools actually work under the hood, the subtle ways they can fail, and when they&amp;rsquo;re truly beneficial versus when they&amp;rsquo;re just adding unnecessary complexity.&lt;/p></description></item><item><title>Beyond React.memo: Smarter Ways to Optimize Performance</title><link>https://cekrem.github.io/posts/beyond-react-memo-smarter-performance-optimization/</link><pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/beyond-react-memo-smarter-performance-optimization/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>When it comes to React performance optimization, &lt;code>React.memo&lt;/code> is often the first tool developers reach for. It&amp;rsquo;s the hammer we grab when we notice re-render issues, and suddenly everything looks like a nail. But what if I told you that in many cases, there are simpler, more elegant solutions that align better with React&amp;rsquo;s compositional nature?&lt;/p>
&lt;p>Today, I want to explore some fundamental concepts about how React renders components and share composition patterns that can dramatically improve performance without the complexity and gotchas of memoization.&lt;/p></description></item><item><title>Single Responsibility Principle in React: The Art of Component Focus</title><link>https://cekrem.github.io/posts/single-responsibility-principle-in-react/</link><pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/single-responsibility-principle-in-react/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>We&amp;rsquo;ve covered &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go">Dependency Inversion&lt;/a>, &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice">Interface Segregation&lt;/a>, &lt;a href="https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance">Liskov Substitution&lt;/a>, and &lt;a href="https://cekrem.github.io/posts/open-closed-principle-in-react">Open-Closed&lt;/a>. Now it&amp;rsquo;s time for the foundation of SOLID: the Single Responsibility Principle (SRP).&lt;/p>
&lt;p>Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong>software architecture&lt;/strong> in his classic &lt;a href="https://amzn.to/4iAc8o1">Clean Architecture&lt;/a>! That book is my primary inspiration for this series.&lt;/p>
&lt;blockquote>
&lt;p>The Single Responsibility Principle states that a class should have only one reason to change.&lt;/p>&lt;/blockquote>
&lt;h2 id="the-problem-with-multiple-responsibilities">The Problem with Multiple Responsibilities&lt;/h2>
&lt;p>Here&amp;rsquo;s a common anti-pattern:&lt;/p></description></item><item><title>Open-Closed Principle in React: Building Extensible Components</title><link>https://cekrem.github.io/posts/open-closed-principle-in-react/</link><pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/open-closed-principle-in-react/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>After exploring &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go">Dependency Inversion&lt;/a>, &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice">Interface Segregation&lt;/a>, and &lt;a href="https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance">Liskov Substitution&lt;/a>, let&amp;rsquo;s tackle the Open-Closed Principle (OCP) in the context of modern React applications.&lt;/p>
&lt;p>Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong>software architecture&lt;/strong> in his classic &lt;a href="https://amzn.to/4iAc8o1">Clean Architecture&lt;/a>! That book is my primary inspiration for this series.&lt;/p>
&lt;blockquote>
&lt;p>The Open-Closed Principle states that software entities should be open for extension but closed for modification.&lt;/p>&lt;/blockquote>
&lt;p>In React terms: components should be easy to extend without changing their existing code. Let&amp;rsquo;s see how this plays out in practice.&lt;/p></description></item><item><title>Math test for staying home with semi-sick kids</title><link>https://cekrem.github.io/posts/math-test-for-home-schooling/</link><pubDate>Wed, 23 Oct 2024 13:35:45 +0200</pubDate><guid>https://cekrem.github.io/posts/math-test-for-home-schooling/</guid><description>&lt;h2 id="sick-kid-but-not-that-sick">Sick kid, but not &lt;em>that&lt;/em> sick?&lt;/h2>
&lt;p>The other day I was home with my oldest daughter. She had a slight cold and an Almost-Fever™, which is usually not enough to skip school by my standards, but this particular day was an outdoors day with a lot of straining physical activity. So, against my potential better judgment I let her stay home, but warned her that it wouldn&amp;rsquo;t be quite a spa – some chores and a little school work was to be expected. She gladly accepted my terms, well-raised and polite as she indeed is.&lt;/p></description></item><item><title>Exploring UIs in the terminal part 2: More ink!</title><link>https://cekrem.github.io/posts/do-more-stuff-cli-tool-part-2/</link><pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/do-more-stuff-cli-tool-part-2/</guid><description>&lt;h2 id="abandon-ship-all-yall">Abandon ship, all y&amp;rsquo;all&lt;/h2>
&lt;p>In &lt;a href="https://cekrem.github.io/posts/do-more-stuff-cli-tool-part-1">part 1&lt;/a>, I made a small POC cli tool for doing multiple things in parallel. Like curling multiple endpoints and collecting the responses in a neat and tidy list instead of opening several terminal tabs/panes. The goal was partly to explore how rendering actually works in a more confined environment than the DOM (web), or more complicated yet: native mobile apps. The other goal, as usual, was to have fun while doing it. My adventures in part 2 have, however, been slightly shipwrecked.&lt;/p></description></item><item><title>Exploring UIs in the terminal part 1: React/Ink</title><link>https://cekrem.github.io/posts/do-more-stuff-cli-tool-part-1/</link><pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/do-more-stuff-cli-tool-part-1/</guid><description>&lt;h2 id="where-do-uis-belong">Where do UIs belong?&lt;/h2>
&lt;p>Most of us consider ReactJS a tool for rendering UI components on the web (or the DOM, specifically), and if by &amp;ldquo;React&amp;rdquo; we mean &amp;ldquo;ReactDOM&amp;rdquo; then we&amp;rsquo;re right. But as we&amp;rsquo;ve seen with React Native, React is not confined to the DOM at all, and can render to any number of environments. After all, like it says on the box, React is a &amp;ldquo;JavaScript library for building user interfaces&amp;rdquo;. We&amp;rsquo;ve seen the same with &lt;a href="https://www.jetbrains.com/lp/compose-multiplatform/">Compose Multiplatform&lt;/a>: what used to be a framework for creating Android UI can actually be used for so much more.&lt;/p></description></item><item><title>Changing Jobs Without Leaving Your Company</title><link>https://cekrem.github.io/posts/changing-jobs-without-leaving-your-company/</link><pubDate>Tue, 21 Jun 2022 07:00:15 +0200</pubDate><guid>https://cekrem.github.io/posts/changing-jobs-without-leaving-your-company/</guid><description>&lt;p>So you&amp;rsquo;ve been at your company for a couple of years. Your parents tell you to stick around for another five, but other people in tech - and your adventurous self - tell you it&amp;rsquo;s about time to learn something new. What if you could do both? The most common path to take in order to learn something new, advance your career, increase your salary or simply Change Things Up A Bit involves leaving your company for something else. This is especially true in tech. (Sadly, the salary part is &lt;em>especially&lt;/em> true in tech; to the point where just about the only way to get a raise is to &lt;em>say&lt;/em> that you&amp;rsquo;re leaving for a better deal, and either take the deal or the inevitable counter-offer from your current workplace. Not cool.)&lt;/p></description></item><item><title>React Advent Calendar – keto vegan, gluten free and no parabens or plastic wrapping</title><link>https://cekrem.github.io/posts/react-advent-calendar/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/react-advent-calendar/</guid><description>&lt;h1 id="tldr-i-made-an-advent-calendar-in-react-my-wife-loved-it">TL;DR: I made an advent calendar in React, my wife loved it&lt;/h1>
&lt;p>I grew up with a lot of creative advent calendars. The one type I &lt;em>didn&amp;rsquo;t&lt;/em> get was the standard chocolate one that&amp;rsquo;s most common these days. While I&amp;rsquo;ve not consistently been very good at paying this forward, I do make an effort some years to do something a bit different for my wife. Yes, my wife; the kids get standard ones :P This year&amp;rsquo;s plan was simple: create an online calendar with cozy favors, encouragements and the like each day until Christmas. I had planned to spend exactly one evening on this - the last evening of November, to be precise. But, my wife&amp;rsquo;s plans for the evening evaporated as she decided she &amp;ldquo;really wanted to hang out with me at home&amp;rdquo; instead. Needless to say, I had to work quite fast.&lt;/p></description></item></channel></rss>