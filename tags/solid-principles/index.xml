<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Solid-Principles on cekrem.github.io</title><link>https://cekrem.github.io/tags/solid-principles/</link><description>Recent content in Solid-Principles on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 09 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/solid-principles/index.xml" rel="self" type="application/rss+xml"/><item><title>Dependency Inversion in React: Building Truly Testable Components</title><link>https://cekrem.github.io/posts/dependency-inversion-in-react/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/dependency-inversion-in-react/</guid><description>&lt;p>In the world of React development, we often find ourselves writing components that are tightly coupled to their dependencies. This makes testing difficult, maintenance a challenge, and change nearly impossible. The Dependency Inversion Principle (DIP) offers a way out of this mess, but how do we apply it effectively &lt;strong>in React&lt;/strong>?&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> For a more backend-oriented take on Dependency Inversion, check out my previous post on &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go/">Dependency Inversion in Go Using Plugins&lt;/a>.&lt;/p></description></item></channel></rss>