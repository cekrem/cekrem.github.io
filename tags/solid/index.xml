<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SOLID on cekrem.github.io</title><link>https://cekrem.github.io/tags/solid/</link><description>Recent content in SOLID on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 04 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/solid/index.xml" rel="self" type="application/rss+xml"/><item><title>Single Responsibility Principle in React: The Art of Component Focus</title><link>https://cekrem.github.io/posts/single-responsibility-principle-in-react/</link><pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/single-responsibility-principle-in-react/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve covered &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" &gt;Dependency Inversion&lt;/a&gt;, &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" &gt;Interface Segregation&lt;/a&gt;, &lt;a href="https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance" &gt;Liskov Substitution&lt;/a&gt;, and &lt;a href="https://cekrem.github.io/posts/open-closed-principle-in-react" &gt;Open-Closed&lt;/a&gt;. Now it&amp;rsquo;s time for the foundation of SOLID: the Single Responsibility Principle (SRP).&lt;/p&gt;
&lt;p&gt;Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong&gt;software architecture&lt;/strong&gt; in his classic &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener"&gt;Clean Architecture&lt;/a&gt;! That book is my primary inspiration for this series.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Single Responsibility Principle states that a class should have only one reason to change.&lt;/p&gt;</description></item><item><title>Open-Closed Principle in React: Building Extensible Components</title><link>https://cekrem.github.io/posts/open-closed-principle-in-react/</link><pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/open-closed-principle-in-react/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;After exploring &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" &gt;Dependency Inversion&lt;/a&gt;, &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" &gt;Interface Segregation&lt;/a&gt;, and &lt;a href="https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance" &gt;Liskov Substitution&lt;/a&gt;, let&amp;rsquo;s tackle the Open-Closed Principle (OCP) in the context of modern React applications.&lt;/p&gt;
&lt;p&gt;Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong&gt;software architecture&lt;/strong&gt; in his classic &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener"&gt;Clean Architecture&lt;/a&gt;! That book is my primary inspiration for this series.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Open-Closed Principle states that software entities should be open for extension but closed for modification.&lt;/p&gt;</description></item><item><title>Liskov Substitution: The Real Meaning of Inheritance</title><link>https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance/</link><pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;After exploring &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" &gt;Dependency Inversion&lt;/a&gt; and &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" &gt;Interface Segregation&lt;/a&gt;, let&amp;rsquo;s tackle perhaps the most misunderstood principle of SOLID: The Liskov Substitution Principle (LSP).&lt;/p&gt;
&lt;p&gt;Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong&gt;software architecture&lt;/strong&gt; in his classic &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener"&gt;Clean Architecture&lt;/a&gt;! That book is my primary inspiration for this series. Without clean architecture, we&amp;rsquo;ll all be building firmware (my paraphrased summary).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Liskov Substitution Principle states that if S is a subtype of T, then objects of type T may be replaced with objects of type S without altering any of the desirable properties of the program.&lt;/p&gt;</description></item><item><title>Interface Segregation: Why Your Interfaces Should Be Small and Focused</title><link>https://cekrem.github.io/posts/interface-segregation-in-practice/</link><pubDate>Tue, 14 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/interface-segregation-in-practice/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In our &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" &gt;previous post&lt;/a&gt;, we explored the Dependency Inversion Principle and how it enables clean, modular architectures. Today, let&amp;rsquo;s dive into another crucial SOLID principle: Interface Segregation.&lt;/p&gt;
&lt;p&gt;Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong&gt;software architecture&lt;/strong&gt; in his classic &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener"&gt;Clean Architecture&lt;/a&gt;! That book is my primary inspiration for this series. Without clean architecture, we&amp;rsquo;ll all be building firmware (my paraphrased summary).&lt;/p&gt;</description></item><item><title>Clean Architecture: A Practical Example of Dependency Inversion in Go using Plugins</title><link>https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go/</link><pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Update: this has become a series, the next entry can be found here: &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice/" &gt;Interface Segregation: Why Your Interfaces Should Be Small and Focused&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve lately enjoyed revisiting the &lt;a href="//en.wikipedia.org/wiki/SOLID" class="external-link" target="_blank" rel="noopener"&gt;SOLID Design Principles&lt;/a&gt;. In the world of software architecture, few principles have stood the test of time like these. I find the &amp;ldquo;Dependency Inversion Principle&amp;rdquo; particularly interesting, as it&amp;rsquo;s one of the few that are either forgotten in modern applications, or drowned in so much over-engineering that the cost/benefit equation is offset anyways.&lt;/p&gt;</description></item></channel></rss>