<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TDD on cekrem.github.io</title><link>https://cekrem.github.io/tags/tdd/</link><description>Recent content in TDD on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 25 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/tdd/index.xml" rel="self" type="application/rss+xml"/><item><title>Refactoring Towards Cleaner Boundaries: Lessons from Building a Markdown Blog Engine (Part 3)</title><link>https://cekrem.github.io/posts/refactoring-towards-cleaner-boundaries/</link><pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/refactoring-towards-cleaner-boundaries/</guid><description>&lt;p>In &lt;a href="https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture" >part 1&lt;/a>, we laid out our Clean Architecture vision. In &lt;a href="https://cekrem.github.io/posts/double-loop-tdd-blog-engine-pt2" >part 2&lt;/a>, we explored Double Loop TDD. Today, we dive into the &lt;strong>refactoring journey&lt;/strong> that emerged from implementing these principles.&lt;/p>
&lt;p>The source code at the time of writing is &lt;a href="https://github.com/cekrem/clean-blog/tree/v0.3" class="external-link" target="_blank" rel="noopener">available on GitHub&lt;/a>.&lt;/p>
&lt;h2 id="the-controller-conundrum">
 The Controller Conundrum
 &lt;a class="heading-link" href="#the-controller-conundrum">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>One of the most significant architectural changes in this iteration was moving the &lt;code>ContentController&lt;/code> from the infrastructure layer to the &lt;strong>interface adapters layer&lt;/strong>. This shift better aligns with Clean Architecture principles:&lt;/p></description></item><item><title>Double Loop TDD: Building My Blog Engine the Right Way (part 2)</title><link>https://cekrem.github.io/posts/double-loop-tdd-blog-engine-pt2/</link><pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/double-loop-tdd-blog-engine-pt2/</guid><description>&lt;h2 id="from-hugo-to-kotlin-the-journey-continues">
 From Hugo to Kotlin: The Journey Continues
 &lt;a class="heading-link" href="#from-hugo-to-kotlin-the-journey-continues">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>In my &lt;a href="https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture" >previous post&lt;/a>, embarked on a bold and ambitious journey to replace Hugo with a custom Kotlin-based blog engine built using Clean Architecture principles (to the letter!). Today, I want to dive deeper into the development process, specifically how I&amp;rsquo;m using &lt;strong>Double Loop TDD&lt;/strong> to ensure the quality and maintainability of the system. Again, I&amp;rsquo;m trying to go all-in, basically to see how far is too far, and to learn and explore.&lt;/p></description></item><item><title>Making a Clean Architecture Blog Engine From Scratch pt 1</title><link>https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture/</guid><description>&lt;h2 id="lets-make-a-blog-engine-ey">
 Let&amp;rsquo;s make a blog engine, ey?
 &lt;a class="heading-link" href="#lets-make-a-blog-engine-ey">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Don&amp;rsquo;t get me wrong - &lt;a href="https://gohugo.io/" class="external-link" target="_blank" rel="noopener">Hugo&lt;/a> (the stuff that I&amp;rsquo;m currently using to drive this site) is great. It&amp;rsquo;s blazing fast, feature-rich, and battle-tested. But as a developer who&amp;rsquo;s been diving deep into Clean Architecture lately (as you might have noticed from my &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" >recent&lt;/a> &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" >posts&lt;/a>), I&amp;rsquo;ve been itching to apply these principles to a real project. And what better way to learn than by potentially over-engineering my own blog engine?&lt;/p></description></item></channel></rss>