<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on cekrem.github.io</title><link>https://cekrem.github.io/tags/testing/</link><description>Recent content in Testing on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 09 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Dependency Inversion in React: Building Truly Testable Components</title><link>https://cekrem.github.io/posts/dependency-inversion-in-react/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/dependency-inversion-in-react/</guid><description>&lt;p&gt;In the world of React development, we often find ourselves writing components that are tightly coupled to their dependencies. This makes testing difficult, maintenance a challenge, and change nearly impossible. The Dependency Inversion Principle (DIP) offers a way out of this mess, but how do we apply it effectively &lt;strong&gt;in React&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For a more backend-oriented take on Dependency Inversion, check out my previous post on &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go/" class="external-link" target="_blank" rel="noopener"&gt;Dependency Inversion in Go Using Plugins&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Double Loop TDD: Building My Blog Engine the Right Way (part 2)</title><link>https://cekrem.github.io/posts/double-loop-tdd-blog-engine-pt2/</link><pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/double-loop-tdd-blog-engine-pt2/</guid><description>&lt;h2 id="from-hugo-to-kotlin-the-journey-continues"&gt;
 From Hugo to Kotlin: The Journey Continues
 &lt;a class="heading-link" href="#from-hugo-to-kotlin-the-journey-continues"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In my &lt;a href="https://cekrem.github.io/posts/replacing-hugo-with-kotlin-clean-architecture" &gt;previous post&lt;/a&gt;, embarked on a bold and ambitious journey to replace Hugo with a custom Kotlin-based blog engine built using Clean Architecture principles (to the letter!). Today, I want to dive deeper into the development process, specifically how I&amp;rsquo;m using &lt;strong&gt;Double Loop TDD&lt;/strong&gt; to ensure the quality and maintainability of the system. Again, I&amp;rsquo;m trying to go all-in, basically to see how far is too far, and to learn and explore.&lt;/p&gt;</description></item></channel></rss>