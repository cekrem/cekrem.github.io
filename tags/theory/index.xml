<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Theory on cekrem.github.io</title><link>https://cekrem.github.io/tags/theory/</link><description>Recent content in Theory on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 26 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/theory/index.xml" rel="self" type="application/rss+xml"/><item><title>Programming as Theory Building: Why Senior Developers Are More Valuable Than Ever</title><link>https://cekrem.github.io/posts/programming-as-theory-building-naur/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/programming-as-theory-building-naur/</guid><description>&lt;p&gt;In 1985, computer scientist Peter Naur wrote a prescient essay called &lt;a href="https://pages.cs.wisc.edu/~remzi/Naur.pdf" class="external-link" target="_blank" rel="noopener"&gt;&amp;ldquo;Programming as Theory Building&amp;rdquo;&lt;/a&gt; that feels more relevant today than ever. As we watch junior developers reflexively accept LLM-generated code they don&amp;rsquo;t understand, and see codebases balloon with theoretically orphaned implementations, Naur&amp;rsquo;s central thesis becomes crystal clear: &lt;strong&gt;a program is not its source code&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="the-theory-behind-the-code"&gt;
 The Theory Behind the Code
 &lt;a class="heading-link" href="#the-theory-behind-the-code"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Naur argues that programming is fundamentally about building a theoryâ€”a &lt;strong&gt;shared mental model&lt;/strong&gt; of how a system works, why it works that way, and how it should evolve. The source code is merely a written representation of this theory, and like all representations, it&amp;rsquo;s lossy. Critical knowledge about intent, design decisions, trade-offs, and the reasoning behind architectural choices exists only in the minds of the people who built the system.&lt;/p&gt;</description></item></channel></rss>