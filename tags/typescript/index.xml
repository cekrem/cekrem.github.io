<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Typescript on cekrem.github.io</title><link>https://cekrem.github.io/tags/typescript/</link><description>Recent content in Typescript on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 04 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Single Responsibility Principle in React: The Art of Component Focus</title><link>https://cekrem.github.io/posts/single-responsibility-principle-in-react/</link><pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/single-responsibility-principle-in-react/</guid><description>&lt;h2 id="introduction">
 Introduction
 &lt;a class="heading-link" href="#introduction">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>We&amp;rsquo;ve covered &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" >Dependency Inversion&lt;/a>, &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" >Interface Segregation&lt;/a>, &lt;a href="https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance" >Liskov Substitution&lt;/a>, and &lt;a href="https://cekrem.github.io/posts/open-closed-principle-in-react" >Open-Closed&lt;/a>. Now it&amp;rsquo;s time for the foundation of SOLID: the Single Responsibility Principle (SRP).&lt;/p>
&lt;p>Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong>software architecture&lt;/strong> in his classic &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener">Clean Architecture&lt;/a>! That book is my primary inspiration for this series.&lt;/p>
&lt;blockquote>
&lt;p>The Single Responsibility Principle states that a class should have only one reason to change.&lt;/p></description></item><item><title>Open-Closed Principle in React: Building Extensible Components</title><link>https://cekrem.github.io/posts/open-closed-principle-in-react/</link><pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/open-closed-principle-in-react/</guid><description>&lt;h2 id="introduction">
 Introduction
 &lt;a class="heading-link" href="#introduction">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>After exploring &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" >Dependency Inversion&lt;/a>, &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" >Interface Segregation&lt;/a>, and &lt;a href="https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance" >Liskov Substitution&lt;/a>, let&amp;rsquo;s tackle the Open-Closed Principle (OCP) in the context of modern React applications.&lt;/p>
&lt;p>Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong>software architecture&lt;/strong> in his classic &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener">Clean Architecture&lt;/a>! That book is my primary inspiration for this series.&lt;/p>
&lt;blockquote>
&lt;p>The Open-Closed Principle states that software entities should be open for extension but closed for modification.&lt;/p></description></item></channel></rss>