<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Typescript on cekrem.github.io</title><link>https://cekrem.github.io/tags/typescript/</link><description>Recent content in Typescript on cekrem.github.io</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 29 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cekrem.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>The Same App in React and Elm: A Side-by-Side Comparison</title><link>https://cekrem.github.io/posts/elm-architecture-vs-react-side-by-side/</link><pubDate>Wed, 29 Oct 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/elm-architecture-vs-react-side-by-side/</guid><description>&lt;p&gt;A few weeks ago, I &lt;a href="https://cekrem.github.io/posts/elm-book-announcement/" class="external-link" target="_blank" rel="noopener"&gt;announced I&amp;rsquo;m writing a book about Elm for React developers&lt;/a&gt;. The response has been encouraging, so here&amp;rsquo;s a full chapter from the book, showing what The Elm Architecture looks like in practice—side-by-side with React.&lt;/p&gt;
&lt;p&gt;(The formatting is slightly nicer in the actual book, but Hugo does a decent job as well.)&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve currently finished the introduction (published &lt;a href="https://cekrem.github.io/posts/elm-book-announcement/" class="external-link" target="_blank" rel="noopener"&gt;here&lt;/a&gt;) and drafted chapters 1-6. I don&amp;rsquo;t plan on adding all, and not in sequence, but some of it will appear on this blog.&lt;/p&gt;</description></item><item><title>Why Elm is the Best Way for React Developers to Learn Real Functional Programming</title><link>https://cekrem.github.io/posts/elm-book-announcement/</link><pubDate>Mon, 20 Oct 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/elm-book-announcement/</guid><description>&lt;p&gt;As my newsletter subscribers suspect and my Ensō colleagues already know by now, &lt;strong&gt;I&amp;rsquo;ve recently started writing a book&lt;/strong&gt;. Not just any book—a practical guide for React developers who want to learn functional programming the right way, without getting lost in academic theory or Haskell&amp;rsquo;s notorious learning curve.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cekrem.github.io/images/book.png" alt="Placeholder book cover"&gt;&lt;/p&gt;
&lt;p&gt;The working title is &lt;strong&gt;&amp;ldquo;An Elm Primer for React Developers: The Best Way to Learn Real Functional Programming&amp;rdquo;&lt;/strong&gt;, and yes, that&amp;rsquo;s a bold claim. Let me explain why I believe it. (Or go right ahead and download a free sample / buy the book on its &lt;a href="https://leanpub.com/elm-for-react-devs" class="external-link" target="_blank" rel="noopener"&gt;leanpub landing site&lt;/a&gt;.)&lt;/p&gt;</description></item><item><title>React Reconciliation: The Hidden Engine Behind Your Components</title><link>https://cekrem.github.io/posts/react-reconciliation-deep-dive/</link><pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/react-reconciliation-deep-dive/</guid><description>&lt;h5 id="update-while-simplifying-a-complex-code-example-shortly-before-publishing-i-messed-up-some-details-thanks-to-reader-feedback-for-pointing-this-out-im-very-grateful-i-also-messed-up-an-internal-link-but-thats-fixed-as-well-thanks-again"&gt;
 Update: While simplifying a complex code example shortly before publishing, I messed up some details. Thanks to reader feedback for pointing this out, I&amp;rsquo;m very grateful! I also messed up an internal link, but that&amp;rsquo;s fixed as well. Thanks again
 &lt;a class="heading-link" href="#update-while-simplifying-a-complex-code-example-shortly-before-publishing-i-messed-up-some-details-thanks-to-reader-feedback-for-pointing-this-out-im-very-grateful-i-also-messed-up-an-internal-link-but-thats-fixed-as-well-thanks-again"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h5&gt;
&lt;h2 id="the-reconciliation-engine"&gt;
 The Reconciliation Engine
 &lt;a class="heading-link" href="#the-reconciliation-engine"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In my previous articles (&lt;a href="https://cekrem.github.io/posts/beyond-react-memo-smarter-performance-optimization/" &gt;1&lt;/a&gt;, &lt;a href="https://cekrem.github.io/posts/react-memo-when-it-helps-when-it-hurts/" &gt;2&lt;/a&gt;), I explored how &lt;code&gt;React.memo&lt;/code&gt; works and smarter ways to optimize performance through composition. But to truly master React performance, we need to understand the engine that powers it all: React&amp;rsquo;s reconciliation algorithm.&lt;/p&gt;</description></item><item><title>React.memo Demystified: When It Helps and When It Hurts</title><link>https://cekrem.github.io/posts/react-memo-when-it-helps-when-it-hurts/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/react-memo-when-it-helps-when-it-hurts/</guid><description>&lt;h2 id="the-promise-of-memoization"&gt;
 The Promise of Memoization
 &lt;a class="heading-link" href="#the-promise-of-memoization"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;When React applications start to slow down, &lt;code&gt;React.memo&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, and &lt;code&gt;useCallback&lt;/code&gt; are often the first tools developers reach for. After all, preventing unnecessary re-renders seems like a straightforward path to better performance. But in the React ecosystem, memoization is far more complex than it first appears.&lt;/p&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll look at how these tools actually work under the hood, the subtle ways they can fail, and when they&amp;rsquo;re truly beneficial versus when they&amp;rsquo;re just adding unnecessary complexity.&lt;/p&gt;</description></item><item><title>Beyond React.memo: Smarter Ways to Optimize Performance</title><link>https://cekrem.github.io/posts/beyond-react-memo-smarter-performance-optimization/</link><pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/beyond-react-memo-smarter-performance-optimization/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;When it comes to React performance optimization, &lt;code&gt;React.memo&lt;/code&gt; is often the first tool developers reach for. It&amp;rsquo;s the hammer we grab when we notice re-render issues, and suddenly everything looks like a nail. But what if I told you that in many cases, there are simpler, more elegant solutions that align better with React&amp;rsquo;s compositional nature?&lt;/p&gt;
&lt;p&gt;Today, I want to explore some fundamental concepts about how React renders components and share composition patterns that can dramatically improve performance without the complexity and gotchas of memoization.&lt;/p&gt;</description></item><item><title>Single Responsibility Principle in React: The Art of Component Focus</title><link>https://cekrem.github.io/posts/single-responsibility-principle-in-react/</link><pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/single-responsibility-principle-in-react/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve covered &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" &gt;Dependency Inversion&lt;/a&gt;, &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" &gt;Interface Segregation&lt;/a&gt;, &lt;a href="https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance" &gt;Liskov Substitution&lt;/a&gt;, and &lt;a href="https://cekrem.github.io/posts/open-closed-principle-in-react" &gt;Open-Closed&lt;/a&gt;. Now it&amp;rsquo;s time for the foundation of SOLID: the Single Responsibility Principle (SRP).&lt;/p&gt;
&lt;p&gt;Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong&gt;software architecture&lt;/strong&gt; in his classic &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener"&gt;Clean Architecture&lt;/a&gt;! That book is my primary inspiration for this series.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Single Responsibility Principle states that a class should have only one reason to change.&lt;/p&gt;</description></item><item><title>Open-Closed Principle in React: Building Extensible Components</title><link>https://cekrem.github.io/posts/open-closed-principle-in-react/</link><pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate><guid>https://cekrem.github.io/posts/open-closed-principle-in-react/</guid><description>&lt;h2 id="introduction"&gt;
 Introduction
 &lt;a class="heading-link" href="#introduction"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;After exploring &lt;a href="https://cekrem.github.io/posts/clean-architecture-and-plugins-in-go" &gt;Dependency Inversion&lt;/a&gt;, &lt;a href="https://cekrem.github.io/posts/interface-segregation-in-practice" &gt;Interface Segregation&lt;/a&gt;, and &lt;a href="https://cekrem.github.io/posts/liskov-substitution-the-real-meaning-of-inheritance" &gt;Liskov Substitution&lt;/a&gt;, let&amp;rsquo;s tackle the Open-Closed Principle (OCP) in the context of modern React applications.&lt;/p&gt;
&lt;p&gt;Again, kudos to Uncle Bob for reminding me about the importance of good &lt;strong&gt;software architecture&lt;/strong&gt; in his classic &lt;a href="https://amzn.to/4iAc8o1" class="external-link" target="_blank" rel="noopener"&gt;Clean Architecture&lt;/a&gt;! That book is my primary inspiration for this series.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Open-Closed Principle states that software entities should be open for extension but closed for modification.&lt;/p&gt;</description></item></channel></rss>